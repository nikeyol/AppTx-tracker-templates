Title,Labels,Type,Description
1. Externalize Configuration for the <acme> application using Spring Config-Server,modernization,feature,"	AS a PRODUCT OWNER
I WANT the ability for the <acme> application to store the configuration properties _outside_ the application and, have the ability to _update_ the configuration properties ***without restarting*** the application,
BECAUSE I want to _externalize_ the configuration properties for the <acme> application.

***Acceptance Criteria***
-  a Spring Cloud Config Server _stores_ all the _configuration properties_ for the <acme> application.
- the Spring Config Server is *not* part of the <acme> application.
- use git, svn, database or Consul as a _backend_ to store the configuration parameters. 
- verify the configuration properties can be refreshed ***without restarting*** the <acme> application."
2. Credentials management for the <acme> application using Spring CredHub ,modernization,feature,"AS a PRODUCT OWNER
I WANT the ability to manage the <acme> application credentials _externally_,
BECAUSE I want to _modernize_ the Credential management for the <acme> app using CredHub in PCF.

***Acceptance Criteria***"
3. Implement Spring Cloud Service Registry and Discovery for the <acme> application ,modernization,feature,"	AS a PRODUCT OWNER
I WANT the ability for the <acme> application to be _reliable_ and _failure-tolerant_,
BECAUSE I want to make the <acme> application _resilient_ and support _automatic discovery_ by other applications.

***Acceptance Criteria***
-  a Service Registry for the <acme> application is implemented using the Spring Cloud Service Registry.
-  the services provided by <acme> application can be invoked using _logical service id_ instead of the specific IP Address and port numbers.
- the services provided by <acme> application can be discovered by other services using Spring Cloud Discovery.
- verify _spin up_ of new <acme> application instances is _dynamic_ based on the load."
4. Implement Circuit Breaker for the <acme> application ,modernization,feature,"	AS a PRODUCT OWNER
I WANT the ability for the <acme> application to gracefully degrade functionality when a method/service call fails,
BECAUSE I want the <acme> application to continue operating when a related service fails, preventing the failure from cascading and giving the failing service time to recover.

***Acceptance Criteria***
-  a Circuit Breaker pattern for the <acme> application is implemented using the _Spring Cloud Hystrix_.
- verify the _failure_ of the method calls beyond a pre-specified threshold is _redirected_ to a specific fallback method.
- verify _after_ the failing service has _recovered_, the calls are *NOT directed* to the fallback method.
"